.TH BASHBUD 1 2018\-12\-27 Linx "User Manuals"
.SH NAME
.PP
\fB\fCbashbud\fR \- Boilerplate and template maker for bash scripts

.SH SYNOPSIS
.PP
.RS

.nf
\-\-new|\-n   [GENERATOR] **TARGET\_DIR**
\-\-bump|\-b  [PROJECT\_DIR]
\-\-help|\-h
\-\-version|\-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCbashbud\fR can be used to quickly create new
scripts with cli\-option support and automatic
documentation applied.

.SH OPTIONS
.PP
\fB\fC\-\-new\fR|\fB\fC\-n\fR

.PP
\fB\fC\-\-bump\fR|\fB\fC\-b\fR

.PP
\fB\fC\-\-help\fR|\fB\fC\-h\fR

.PP
\fB\fC\-\-version\fR|\fB\fC\-v\fR


.SH bashbud project
.PP
A project in the bashbud context refers to a
directory and it's content that contains a
[manifest.md] file. The manifest tells bashbud
which generator to use when updating the project
with the command\-line option \fB\fC\-\-bump\fR\&.


.SH the manifest
.PP
The manifest is the only mandatory thing
\fB\fCbashbud\fR needs to operate on a [project].  The
manifest consist of three parts:

.RS
.IP "  1." 5
comment area
.IP "  2." 5
front matter
.IP "  3." 5
manifest body

.RE

.PP
Below is an example of how a manifest can look
like:

.PP
.RS

.nf
this is just an example
any text before the start of the front matter
will be ignored by bashbud and can be used to write comments.
\-\-\-
description: >
    When parsed lines with the same intendation
    after a block definition (>) will be concatenated.
version: 1.100
created: 2018\-12\-15
updated: 2022\-10\-06
generator: default
author:  budRich
synopsis: |
    \-\-help|\-h [COMMAND]
    \-\-version|\-v
    \-\-new FILE **DIRECTORY**
...

# long\_description
This is just a simple hello world program.
That will print the string "hello world" to `stdout`.  
if not the **new** option is used.

# options\-help\-description
print help information to `stderr` and exit.

# option\-new\-description
Creates a file with the string "hello world" to FILE

# options\-version\-description
Print version info to `stderr` and exit.


.fi
.RE

.SH manifest front matter
.PP
The manifest front matter is the only mandatory
part of the manifest.  It needs to be defined
before the manifest body in the \fB\fCmanifest.md\fR
file, in [YAML] format (starting with three dashes
(\fB\fC\-\-\-\fR) and ending with thre dots (\fB\fC\&...\fR).

.PP
The front matter can contain any number of user
defined, variables, lists and arrays, but some
keys are special and three of them are mandatory
and autogenerated.

.SH mandatory manifest variables
.PP
When a new \fIbashbud project\fP is created with the
command\-line option \fB\fC\-\-new\fR, \fB\fCbashbud\fR will
automatically fill out the current date according
to the format defined in the environment variable:
\fB\fCBASHBUD\_DATEFORMAT\fR, in both the created and
updated keys. It will also set the version number
to 0.000. When a \fIbashbud project\fP is updated with
the command\-line option \fB\fC\-\-bump\fR, the updated key
will be set the to the current date and the
version number will be increased by 0.001.

.PP
Therefor the version and updated keys are
mandatory in the manifest front matter.

.SH special variables in the manifest front matter
.PP
The key \fB\fCgenerator\fR tells \fB\fCbashbud\fR what
generator to use, it is not mandatory and defaults
to: \fB\fCdefault\fR if omitted and is always overridden
by a [project specific generator].

.PP
Another special variable is [synopsis].

.SH the synopsis variable and options array
.PP
The key \fB\fCsynopsis\fR will be translated to an array
called \fIoptions\fP when parsed by \fB\fCbashbud\fR\&. If used
properly this will be the only place needed to
declare command\-line options in a \fIproject\fP\&. Let's
take a closer look at the \fB\fCsynopsis\fR key from the
example manifest above.

.PP
.RS

.nf
synopsis: |
    \-\-help|\-h [COMMAND]
    \-\-version|\-v
    \-\-new FILE **DIRECTORY**


.fi
.RE

.PP
The pipe (\fB\fC|\fR) character, after the key
definition, is [YAML] syntax meaning that the
content of the key should be interpreted literal.
Which in turn means it will preserve linebreaks as
they are written. The indentation specifies the
scope.

.PP
Translated to a \fB\fCbash\fR variable, it would look
like this:

.PP
.RS

.nf
synopsis'\-\-help|\-h [COMMAND]
\-\-version|\-v
\-\-new FILE **DIRECTORY**'


.fi
.RE

.PP
The above is also what would be printed if
\fB\fC%%synopsis%%\fR would be used in a \fBbashbud
template\fP\&.

.PP
But as mentioned, the content of the synopsis
will also get stored in a special array called
\fIoptions\fP:

.PP
.RS

.nf
options[help][long]=help
options[help][short]=h
options[version][long]=version
options[version][short]=v
options[new][long]=new
options[new][arg]=FILE


.fi
.RE

.PP
Notice that the option \fB\fC\-\-help\fR in the synopsis
have an \fIoptional\fP argument defined, (\fB\fC[COMMAND]\fR)
and that it is ignored in the array. Sometimes it
is also desired to have a mandatory argument,
that doesn't belong to the preceding option. Such
arguments should be enclosed withing double
asterisks (\fB\fC**DIRECTORY**\fR).

.SH manifest body
.PP
The manifest body is considered everything after
the manifest front matter in the \fB\fCmanifest.md\fR
file  \fBAND\fP the content of all files in the
directory \fB\fCmanifest.d\fR\&. The manifest body is used
to add more variables to the manifest,  but are
here written in markdown instead of YAML. The
reason for this is that it is more convenient to
write prose like text in markdown. Markdown
headings (lines starting with one or more hash:
\fB\fC#\fR) will be translated to variables, everything
between headings will be the content of the
variable. It is possible to add keys to arrays
created in the front matter, but it is not
possible to create new arrays in the manifest
body.

.PP
Below is a simple example:

.PP
\fBPROJECT\_DIR/manifest.md\fP

.PP
.RS

.nf
\-\-\-
version: 1.100
created: 2018\-12\-15
updated: 2022\-10\-06
generator: default
synopsis: |
    \-\-help|\-h [COMMAND]
    \-\-version|\-v
    \-\-new FILE **DIRECTORY**
...

# long\_description

This is just an **example** of how use
the `manifest` in a *bashbud* project.


.fi
.RE

.PP
\fBPROJECT\_DIR/manifest.d/options.md\fP

.PP
.RS

.nf
# options\-help\-description

Print help information to stderr and exit

# options\-version\-description

Print version information to stderr and exit

# options\-new\-description

Creates a new FILE


.fi
.RE

.PP
When \fB\fCbashbud\fR processes this project, the
following variables will be available in the
templates:

.PP
.RS

.nf
version='1.100'
created='2018\-12\-15'
updated='2018\-10\-06'
generator='default'
synopsis'\-\-help|\-h [COMMAND]
\-\-version|\-v
\-\-new FILE **DIRECTORY**'
long\_description='This is just an **example** of how use the `manifest` in a *bashbud* project.'
options[help][long]=help
options[help][short]=h
options[help][description]='Print help information to stderr and exit'
options[version][long]=version
options[version][short]=v
options[version][description]='Print version information to stderr and exit'
options[new][long]=new
options[new][arg]=FILE
options[new][description]='Creates a new FILE'


.fi
.RE

.PP
Notice how the dash (\fB\fC\-\fR) in
\fBPROJECT\_DIR/manifest.d/options.md\fP is used to
specify which array and key to use. Also take note
that the linebreak in the \fB\fClong\_description\fR
variable is translated to a space \&. This is
markdown syntax, to make a hard linebreak in
markdown end the line with two space characters.

.SH generators
.PP
A generator is a directory containing templates
and base files used to create or update (\fIbump\fP) a
project. See anatomy of a generator
directory
\[la]#anatomy_of_a_generator_directory\[ra] for
the file structure. When a new project is created
(with the \fB\fC\-\-new\fR option) \fB\fCbashbud\fR will do the
following:

.RS
.IP "  1." 5
determine location of generator
\[la]#determine_location_of_generator\[ra]
.IP "  2." 5
copy base files
\[la]#copy_base_files\[ra]
.IP "  3." 5
create links
\[la]#copy_base_files\[ra]
.IP "  4." 5
process templates
\[la]#process_templates\[ra]

.RE

.PP
When a project is updated with the \fB\fC\-\-bump\fR
command\-line option, it will update the \fIupdated\fP
key and the \fIversion\fP key in the manifest and
process the templates corresponding to the
projects generator.

.SS determine location of generator
.PP
The location of a generator can either be:

.RS
.IP "  1." 5
project specific
.IP "  2." 5
user specific
.IP "  3." 5
system wide

.RE

.PP
\fB\fCbashbud\fR will try these locations in this order
and use the first found one.

.PP
Project specific generators are located in the
root directory of a project in a directory called
\fIbashbud\fP\&.

.PP
user specific generators are located in
\fIBASHBUD\_DIR\fP (which defaults to
\fB\fC\~/.config/bashbud\fR) in which a directory named
\fIgenerators\fP holds separate directories for each
\fIgenerator type\fP\&.

.PP
system wide generators are located in
\fB\fC/usr/share/bashbud\fR in which a directory named
\fIgenerators\fP holds separate directories for each
\fIgenerator type\fP\&. By default the only system wide
\fIgenerator type\fP available is \fIdefault\fP\&.

.PP
The \fIgenerator type\fP is specified in the \fIfront
matter\fP of the projects manifest. If a project
specific generator exists, that will override any
specified \fIgenerator type\fP\&. The \fIgenerator type\fP
can also be specified when creating a new project
wit the \fB\fC\-\-new\fR command\-line option.

.SS copy base files
.PP
\fIuser specific\fP and \fIsystem wide\fP generator
directories look something like this:

.PP
.RS

.nf
generators/
  default/      
    \_\_link/     
      lib/
        ERR.sh
    \_\_templates/
      program/
        \_\_template
        \_\_script
      readme/
        \_\_template
    manifest.d/
      opts.md
      envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
All files and directories within the root
directory of the generator (\fIdefault\fP) that
doesn't start with two underscores are referred to
in the documentation as base files. The base files
will get copied to PROJECT\_DIR when the project is
created with the \fB\fC\-\-new\fR command\-line option.

.PP
.RS

.nf
PROJECT\_DIR/
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The directory structure inside the \fB\fC\_\_link\fR
directory will get created in PROJECT\_DIR when the
project is created with the \fB\fC\-\-new\fR command\-line
option. And all files found (recursively) in the
\fB\fC\_\_link\fR directory will get hard linked (\fB\fCln\fR) to
PROJECT\_DIR.

.PP
.RS

.nf
PROJECT\_DIR/
    lib/
        ERR.sh     <\- linked
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The content of the \fB\fC\_\_templates\fR directory is
only used when a project is updated with the
\fB\fC\-\-bump\fR command\-line option. It is actually the
only part of a generator needed when a PROJECT is
updated.

.PP
A project specific generator is a directory named
bashbud that only contains template directories:

.PP
.RS

.nf
PROJECT\_DIR/
    bashbud/
        program/
            \_\_template
            \_\_script
        readme/
            \_\_template
    manifest.md
    ...


.fi
.RE


.SH generator types
.PP
A project can use one of three types of
generators:

.RS
.IP "  1." 5
Project specific generator (\fBPSG\fP)
.IP "  2." 5
User specific generator (\fBUSG\fP)
.IP "  3." 5
System wide generator (\fBSWG\fP)

.RE

.PP
The type is determined based on the generators
location. If the generator is not project specific
the value of the key: \fB\fCgenerator\fR in the projects
\fBmanifest\fP specifies which generator to use.

.PP
If no \fBPSG\fP exists and no value to the
\fB\fCgenerator\fR key in the manifest is declared. The
default \fBSWG\fP will be used if no default \fBUSG\fP
exists.


.SH Project specific generators (\fBPSG\fP)
.PP
A \fBPSG\fP is unique to a certain project. A
\fBPSG\fP is defined by creating a directory in a
projects root directory named \fB\fCbashbud\fR that
contain templates. This directory have the same
file structure as a \fB\fC\_\_templates\fR directory of a
\fBUSG\fP\&.

.PP
\fBPSG\fP have highest priority of generators and
is used if a \fBPSG\fP directory exist, even if the
\fB\fCgenerator\fR key in the \fBmanifest\fP have a value.

.PP
The purpose and advantage of using a \fBPSG\fP for
a project is that it makes the \fIbashbud build\fP
portable. Anyone can clone the project and use
\fB\fCbashbud \-\-bump\fR to get the same output. \fBPSG\fP
is the recommended generator type, especially for
public projects.

.PP
The disadvantage of using a \fBPSG\fP instead of
the other generator types:

.RS
.IP "  1." 5
A \fBPSG\fP is unique to a project, meaning that changes done to the generator will not apply to other bashbud generators. This can however be done by using [linked generators].
.IP "  2." 5
A \fBPSG\fP can not be used to create a new bashbud project, only update.

.RE

.PP
Below is an example of how the file tree would
look like in a project using a \fBPSG\fP:

.PP
.RS

.nf
PROJECT\_DIR/
    bashbud/
        readme/
            \_\_template
        program/
            \_\_template
            \_\_script
    manifest.d/
        ...
    manifest.md
    ...


.fi
.RE

.PP
When this project would get updated with the
\fB\fC\-\-bump\fR command\-line option,  the templates
within the subdirectories of the \fIbashbud\fP
directory would get get processed.


.SH user specific generators (\fBUSG\fP)
.PP
user specific generators are located in
\fIBASHBUD\_DIR\fP (which defaults to
\fB\fC\~/.config/bashbud\fR) in which a directory named
\fIgenerators\fP holds all available \fBUSG\fP\&.

.PP
Below is an example representation of the files
and directories in a \fBUSG\fP (and a \fBSWG\fP)

.PP
.RS

.nf
BASHBUD\_DIR/
  generators/
    default/      
      \_\_link/     
        lib/
          ERR.sh
      \_\_templates/
        program/
          \_\_template
          \_\_script
        readme/
          \_\_template
      manifest.d/
        opts.md
        envs.md
      main.sh
      manifest.md


.fi
.RE

.PP
All files and directories within the root
directory of the generator (\fIdefault\fP) that
doesn't start with two underscores are referred to
in the documentation as base files. The base files
will get copied to PROJECT\_DIR when the project is
created with the \fB\fC\-\-new\fR command\-line option.

.PP
.RS

.nf
PROJECT\_DIR/
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The directory structure inside the \fB\fC\_\_link\fR
directory will get created in PROJECT\_DIR when the
project is created with the \fB\fC\-\-new\fR command\-line
option. And all files found (recursively) in the
\fB\fC\_\_link\fR directory will get hard linked (\fB\fCln\fR) to
PROJECT\_DIR.

.PP
.RS

.nf
PROJECT\_DIR/
    lib/
        ERR.sh     <\- linked
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The content of the \fB\fC\_\_templates\fR directory is
only used when a project is updated with the
\fB\fC\-\-bump\fR command\-line option. The \fB\fC\_\_templates\fR
directory is actually the only part of a generator
needed when a PROJECT is updated.  Since a \fBPSG\fP
can only be used to \fB\fC\-\-bump\fR a project,  a \fBPSG\fP
generator consists of only the \fB\fC\_\_templates\fR
directory, renamed to \fB\fCbashbud\fR, place in the root
of \fIPROJECT\_DIR\fP\&.


.SH system wide generator (\fBSWG\fP)
.PP
A \fBSWG\fP have the exact same file structure as a
[user specific generator], the only difference
being it's location in the filesystem.

.PP
A \fBSWG\fP is located in
\fB\fC/usr/share/bashbud/generators/\fR while a \fBUSG\fP
is located in \fB\fCBASHBUD\_DIR/generators/\fR\&.

.PP
If a both a \fBSWG\fP and a \fBUSG\fP have the same
name, \fBUSG\fP will have priority.

.PP
By default there only exist one \fBSWG\fP:
\fB\fCdefault\fR\&.


.SH linked generators
.PP
Creating a \fBUSG\fP (or a \fBSWG\fP), that instead
of having its templates located in
\fB\fCGENERATOR\_DIR/\_\_templates\fR, have them at
\fB\fCGENERATOR\_DIR/\_\_link/bashbud\fR\&. Will have the
effect that whenever a new project is created it
will have a \fBPSG\fP (\fB\fCPROJECT\_DIR/bashbud\fR), and
the templates being linked to
\fB\fCGENERATOR\_DIR/\_\_link/bashbud\fR\&. This solves the
issues of local projects not being able to share
templates while still being fully portable.  It is
also a way to use \fB\fC\-\-new\fR with \fBPSG\fP\&.

.PP
This is the recommended way of using bashbud.


.SH generator priority
.PP
The priority of generators is as follows:

.RS
.IP "  1." 5
project specific generator (\fBPSG\fP)
.IP "  2." 5
user specific generator (\fBUSG\fP)
.IP "  3." 5
system wide generator (\fBSWG\fP)

.RE

.PP
Below is are some example to illustrate how this
works:

.PP
.RS

.nf
/usr/share/bashbud/
  generators/
    default/
      ...
    testgen/
      ...
  licenses/
    ...
  awklib/
    ...
  ...


.fi
.RE

.PP
.RS

.nf
BASHBUD\_DIR/
    generators/
      default/
        ...
      mygen/
        ...
    licenses/
      ...
    awklib/
      ...
...


.fi
.RE

.PP
\fBproject 1 directory\fP

.PP
.RS

.nf
PROJECT\_DIR/
  manifest.md


.fi
.RE

.PP
\fBproject 1 manifest.md\fP

.PP
.RS

.nf
\-\-\-
generator: default
...


.fi
.RE

.PP
When project 1 is updated, it will use the
templates located in the \fBUSG\fP: \fB\fCdeault\fR located
in \fIBASHBUD\_DIR\fP\&.

.PP
If we would change the value of the \fIgenerator\fP
key in the manifest to \fB\fCtestgen\fR\&. The templates in
\fBSWG\fP: \fB\fCtestgen\fR in \fB\fC/usr/share/bashbud\fR would
be used to update the project.

.PP
If no generator is specified in the manifest, it
will have the default value: \fB\fCdefault\fR\&. Which
would result in the \fB\fCdefault\fR \fBUSG\fP would be
used.

.PP
If we would add a directory containing templates,
named \fB\fCbashbud\fR to \fIPROJECT\_DIR\fP, that would would
be seen as a \fBPSG\fP and have priority over any
other generator.

.PP
\fBproject 2 directory\fP

.PP
.RS

.nf
PROJECT\_DIR/
  bashbud/
    template1/
      ...
    template2/
      ...
  manifest.md


.fi
.RE

.PP
\fBproject 2 manifest.md\fP

.PP
.RS

.nf
\-\-\-
generator: mygen
...


.fi
.RE

.PP
If project 2 would get updated it would use the
templates from the \fBPSG\fP in \fIPROJECT\_DIR\fP,
ignoring the \fBUSG\fP mygen, even if it is
specified in the manifest and exist in
\fIBASHBUD\_DIR\fP\&.


.SH directory content
.PP
\fBUSG\fP and \fBSWG\fP generator directories look
something like this:

.PP
.RS

.nf
generators/
  default/      
    \_\_link/     
      lib/
        ERR.sh
    \_\_templates/
      program/
        \_\_template
        \_\_script
      readme/
        \_\_template
    manifest.d/
      opts.md
      envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
All files and directories within the root
directory of the generator (\fIdefault\fP) that
doesn't start with two underscores are referred to
in the documentation as base files. The base files
will get copied to PROJECT\_DIR when the project is
created with the \fB\fC\-\-new\fR command\-line option.

.PP
.RS

.nf
PROJECT\_DIR/
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The directory structure inside the \fB\fC\_\_link\fR
directory will get created in PROJECT\_DIR when the
project is created with the \fB\fC\-\-new\fR command\-line
option. And all files found (recursively) in the
\fB\fC\_\_link\fR directory will get hard linked (\fB\fCln\fR) to
PROJECT\_DIR.

.PP
.RS

.nf
PROJECT\_DIR/
    lib/
        ERR.sh     <\- linked
    manifest.d/
        opts.md
        envs.md
    main.sh
    manifest.md


.fi
.RE

.PP
The content of the \fB\fC\_\_templates\fR directory is
only used when a project is updated with the
\fB\fC\-\-bump\fR command\-line option. It is actually the
only part of a generator needed when a PROJECT is
updated.

.PP
A project specific generator is a directory named
bashbud that only contains template directories:

.PP
.RS

.nf
PROJECT\_DIR/
    bashbud/
        program/
            \_\_template
            \_\_script
        readme/
            \_\_template
    manifest.md
    ...


.fi
.RE


.SH templates
.PP
Templates are processed as the last action when
the \fB\fC\-\-new\fR command\-line option is used or as the
sole action when the \fB\fC\-\-bump\fR command\-line option
is used.

.PP
A template consist of three parts:

.RS
.IP "  1." 5
YAML front matter
.IP "  2." 5
template body
.IP "  3." 5
comment area

.RE

.PP
below is a simple template example:

.PP
.RS

.nf
function that prints script name and version
information to stderr.
\-\-\-
target:   lib/printversion.sh
markdown: false
wrap:     50
...
\_\_\_printversion(){
  
cat << 'EOB' >\&2
%%name%% \- version: %%version%%
updated: %%updated%% by %%author%%
EOB
}


.fi
.RE

.SS the template front matter
.PP
A \fBYAML front matter\fP is mandatory in all
templates, but none of the keys, except
\fBtarget\fP, in the front matter is.

.PP
The front matter needs to start with three dashes
(\fB\fC\-\-\-\fR) as the only content of a line, and end
with three dots (\fB\fC\&...\fR) as the only content of a
line. The front matter needs to be defined
\fBbefore\fP the \fBtemplate body\fP\&. Any text before
the start of the front matter will be ignored by
\fB\fCbashbud\fR and can be used to write comments about
the template it self.

.SS template front matter keys
.PP
| key      | description | default |
|:\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-\-\-\-\-|:\-\-\-\-\-\-\-\-| | target   |
destination of the generated file relative to the
current \fBPROJECT\fPs \fImanifest.md\fP\&. | \-\& | |
markdown | if set to false, all expanded variables
and imported markdown files will have their
markdown stripped | false | | wrap     | if set to
an integer higher then 0 all expanded variables
and imported markdown files paragraphs will get
wrapped at the column specified. This applies even
if the \fBmarkdown key\fP is set to false. | 0 |

.SS template body
.PP
\fB\fCbashbud\fR will parse the \fBtemplate body\fP and
evaluate and expand the expressions defined within
double percentage symbols (\fB\fC%%\fR).


.SH variable expansion
.PP
the simplest expression that can be defined in a
\fBtemplate body\fP is variable expansion. Simply
write the name of a variable defined in the
\fImanifest\fP and it will get expanded in the
generated file.

.SH EXAMPLE
.PP
\fB\~/scripts/hello/manifest.md\fP

.PP
.RS

.nf
\-\-\-
updated:       2018\-12\-14
version:       1.165
author:        budRich
created:       2001\-11\-09
...
# long\_description

simple **test program** that will print hello world to `stdout`.


.fi
.RE

.PP
\fBBASHBUD\_DIR/generators/default/\fBtemplates/created/\fPtemplate\fP

.PP
.RS

.nf
\-\-\-
target:   created.txt
markdown: false
wrap:     50
...
%%name%% was created %%created%%.


.fi
.RE

.PP
If we would execute the command:

.PP
.RS

.nf
$ bashbud \-\-bump \~/scripts/hello


.fi
.RE

.PP
The following would happen (\fIassuming no other
files exists\fP):

.RS
.IP "  1." 5
Since no \fBgenerator type\fP is defined in the \fBmanifest\fP default will be assumed and found in \fB\fCBASHBUD\_DIR\fR (which defaults to \fB\fC\~/.config/bashbud\fR).
.IP "  2." 5
5 variables will get defined (updated, version, author, created and long\_description) that can be used in the templates.
.IP "  3." 5
All lines in the content body will get evaluated, (\fIin our example above there is only one line\fP).
.IP "  4." 5
The result of the evaluated template will be the content of the file defined as \fBtarget\fP in the \fBtemplates\fP front matter.

.RE

.PP
\fB\~/scripts/hello/created.txt\fP

.PP
.RS

.nf
hello was created 2001\-11\-09.


.fi
.RE

.PP
\fB\fC%%name%%\fR is a special variable that contains
the name of the directory that holds
\fImanifest.md\fP, in this case: \fIhello\fP

.PP
One more example, with the same \fB\fCmanifest.md\fR but
with a \fB\fC\_\_template\fR looking like this:

.PP
.RS

.nf
\-\-\-
target:   created.txt
markdown: true
wrap:     50
...
%%name%% was created %%created%%.
%%long\_description%%


.fi
.RE

.PP
the value of markdown is changed to \fItrue\fP and
the variable \fIlong\_description\fP is added. The
processed result will look like this:

.PP
.RS

.nf
hello was created 2001\-11\-09.
simple **test program** that will print hello 
world to `stdout`.


.fi
.RE

.PP
Long description is now included with the
markdown markup, notice also that the text is
wrapped at the first space before column 50.


.SH if statements
.PP
If statements are defined like this in the
templates:

.PP
.RS

.nf
%%if EXPRESSION%%
...
%%%fi%%


.fi
.RE

.PP
\fIEXPRESSION\fP can be just the name of a variable
or array. Or a comparison (\fB\fC=\fR or \fB\fC!=\fR):

.PP
\fB\~/scripts/hello/manifest.md\fP

.PP
.RS

.nf
\-\-\-
updated:       2018\-12\-14
version:       1.165
author:        budRich
created:       2001\-11\-09
environ:
    BASHBUD\_DIR: $XDG\_CONFIG\_HOME/bashbud
    BASHBUD\_DATEFORMAT: %Y\-%m\-%d
...
# long\_description

simple **test program** that will print hello world to `stdout`.

# environ\-BASHBUD\_DIR\-info

bashbud config dir location.


.fi
.RE

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target:   if\_statements1.txt
markdown: false
wrap:     50
...
%%if environ%%

Environ variables info:
%%for e in environ%%
%%if e[info]%%
info about %%e%%:
%%e[info]%%
%%else%%
no info about %%e%%.
%%fi%%

%%done%%
%%fi%%
%%if onions%%
we have onions
%%fi%%
%%if author = budRich%%
budrich wrote this
%%else%%
this was written by %%author%%
%%fi%%


.fi
.RE

.PP
this will result in the following file:
\fBif\_statements1.txt\fP

.PP
.RS

.nf
Environment variables info:

info about BASHBUD\_DIR:
bashbud config dir location.

no info about BASHBUD\_TIMEFORMAT

budrich wrote this


.fi
.RE

.SH array definitions
.PP
Arrays can only be \fBcreated\fP in the manifest
\fBfront matter\fP\&. Keys can be added to arrays from
the manifest \fBbody\fP\&.

.SH EXAMPLE
.PP
\fBmanifest.md\fP

.PP
.RS

.nf
\-\-\-
author:        budRich
environ:
    BASHBUD\_DIR: $XDG\_CONFIG\_HOME/bashbud
    BASHBUD\_DATEFORMAT: %Y\-%m\-%d
dependencies:  [bash, gawk, sed]
see\_also:
    \- bash(1)
    \- awk(1)
    \- sed(1)
...
# environ\-BASHBUD\_DIR\-description

Configuration directory for bashbud.

# environ\-BASHBUD\_DIR\-info

XDG\_CONFIG\_HOME is usually \~/.config

# environ\-BASHBUD\_DATEFORMAT\-description

Date format to use in created/updated keys in the
manifest front matter.  

See `date(1)` for available formats.


.fi
.RE

.PP
This will yield the following variables and
arrays available for templates:

.PP
.RS

.nf
author='budRich'
environ[BASHBUD\_DIR][default]='$XDG\_CONFIG\_HOME/bashbud'
environ[BASHBUD\_DIR][description]='Configuration directory for bashbud.'
environ[BASHBUD\_DIR][info]='XDG\_CONFIG\_HOME is usually \~/.config'
environ[BASHBUD\_DATEFORMAT][default]='%Y\-%m\-%d'
environ[BASHBUD\_DATEFORMAT][description]='Date format to use in created/updated keys in the manifest front matter.  

See `date(1)` for available formats.'
dependencies[bash][index]=0
dependencies[gawk][index]=1
dependencies[sed][index]=2
see\_also[bash(1)][index]=0
see\_also[awk(1)][index]=1
see\_also[sed(1)][index]=2


.fi
.RE

.PP
Notice how the dashes are used to specify the
array keys in the manifest.
(\fIenviron\-BASHBUD\_DATEFORMAT\-description\fP)

.SH accessing arrays in templates with loops
.PP
The big advantage of using arrays is that they
can be used in loops.

.PP
Loops are defined like this:

.PP
.RS

.nf
%%for ELEMENT\_ALIAS in ARRAY%%
LOOP BODY
%%done%%


.fi
.RE

.PP
Lets use the \fBmanifest\fP above in a template:

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target:   array\_output.txt
markdown: false
wrap:     50
...
Environment variables:

%%for e in environ%%
%%e%%
%%done%%


.fi
.RE

.PP
this will result in the following file:
\fBarray\_output.txt\fP

.PP
.RS

.nf
Environment variables:

BASHBUD\_DIR
BASHBUD\_DATEFORMAT


.fi
.RE

.PP
one more example,  using the same \fBmanifest\fP

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target:   array\_output.txt
markdown: false
wrap:     50
...
Environment variables:
%%for e in environ%%

%%e%%

%%e[description]%%
defaults to: %%e[default]%%
%%done%%


.fi
.RE

.PP
this will result in the following file:
\fBarray\_output.txt\fP

.PP
.RS

.nf
Environment variables:

BASHBUD\_DIR

Configuration directory for bashbud.
defaults to: $XDG\_CONFIG\_HOME/bashbud

BASHBUD\_DATEFORMAT

Date format to use in created/updated keys in the
manifest front matter.  

See date(1) for available formats.
defaults to: %Y\-%m\-%d


.fi
.RE

.SH printformat
.PP
\fB\fCprintf\fR functionality is available and is
defined like this:

.PP
.RS

.nf
%%printf 'STRINGFORMAT' 'S1' 'S2' ...%%
OR
%%printf "STRINGFORMAT" "S1" "S2" ...%%


.fi
.RE

.PP
STRINGFORMAT and strings needs to be enclosed in
the same type of quotes.

.SH EXAMPLE
.PP
\fB\~/scripts/hello/manifest.md\fP

.PP
.RS

.nf
\-\-\-
updated:       2018\-12\-14
version:       1.165
author:        budRich
created:       2001\-11\-09
dependencies:  [bash, gawk, sed]
...


.fi
.RE

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target:   printformat1.txt
markdown: false
wrap:     50
...
normal loop
%%for d in dependencies%%
%%d%%
%%done%%

with printformat
%%for d in dependencies%%
%%printf '%s,' 'd'%%
%%done%%


.fi
.RE

.PP
\fBprintformat1.txt\fP

.PP
.RS

.nf
normal loop
bash
gawk
sed

with printformat
bash,gawk,sed,


.fi
.RE

.SH import file content with cat
.PP
Sometimes it can be desired to import files that
with content not defined in the manifest. This can
be done by using the \fBcat\fP function within
templates:

.PP
.RS

.nf
example 1. import single file import:
%%cat FILE%%

example 2. import all files in a directory:
%%cat DIR/*%%

example 3. import the n last modified files in a directory:
%%cat DIR/* n%%

example 4. import single file, exclude lines matching PATTERN:
%%cat \-v 'PATTERN' FILE%%

example 5. import the three last modified files in a directory, exclude lines matching PATTERN:
%%cat \-v 'PATTERN' DIR/* 3%%


.fi
.RE

.PP
If the imported file have the extension \fB\fCmd\fR
(\fIFILE.md\fP), line wrapping will be applied to all
paragraphs according to the wrap key in the
templates front matter.

.PP
Lets add two directories and some files to our
example project:

.PP
.RS

.nf
PROJECT\_DIR/
    manifest.md
    doc/
      test1.md
      test2.md
      test3.md
    functions/
      hello.sh
      cleanup.sh


.fi
.RE

.PP
\fBdoc/test1.md\fP

.PP
.RS

.nf
# test1 file

this is just a test file made to demonstrate how the `cat` function in **bashbud** templates work.


.fi
.RE

.PP
\fBdoc/test2.md\fP

.PP
.RS

.nf
test2 file

more stupid
test files  
last line ended with two spaces


.fi
.RE

.PP
\fBdoc/test3.md\fP

.PP
.RS

.nf


test3 file

this file have two leading and trailing blank lines




.fi
.RE

.PP
\fBfunctions/hello.sh\fP

.PP
.RS

.nf
#!/bin/bash

# usage:
# hello NAME
#
# prints 'hello NAME' to stdout
hello() { echo "hello $1" ;}


.fi
.RE

.PP
\fBfunctions/cleanup.sh\fP

.PP
.RS

.nf
#!/bin/bash

# cleanup function
DEATH() {
    exit
}


.fi
.RE

.PP
Now lets try the different ways the \fBcat\fP
function can be used.

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target: cat\-example1.txt
markdown: false
wrap: 20
...
example 1. import single file import:
%%cat doc/test1.md%%

text after import ...


.fi
.RE

.PP
\fBPROJECT\_DIR/cat\-example1.txt\fP

.PP
.RS

.nf
example 1. import single file import:
# test1 file

this is just a test
file made to
demonstrate how the
cat function in
bashbud templates
work.

text after import ...


.fi
.RE

.PP
Notice how markdown markup is stripped from the
file content and that the paragraph is wrapped at
column 20. Also notice that the first line from
the template is not wrapped, this is because the
line is part of the template and not considered a
markdown paragraph by \fB\fCbashbud\fR\&.

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target: cat\-example2.txt
markdown: true
wrap: 20
...
example 2. import all files in a directory:
%%cat doc/*%%

text after import ...


.fi
.RE

.PP
\fBPROJECT\_DIR/cat\-example2.txt\fP

.PP
.RS

.nf
example 2. import all files in a directory:
# test1 file

this is just a test
file made to
demonstrate how the
`cat` function in
**bashbud** templates
work.

test2 file
more stupid test
files
last line ended
with two spaces



test3 file
this file have two
leading and
trailing blank
lines



text after import ...


.fi
.RE

.PP
A blank line is automatically added after each
file is imported. Take notice how wrapping and
linebreaks are applied.

.PP
For this next example, let's assume \fB\fCtest3.md\fR is
the last modified file and \fB\fCtest1.md\fR was the
first modified file.

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target: cat\-example3.txt
markdown: true
wrap: 0
...
example 3. import the n last modified files in a directory:
%%cat doc/* 2%%

text after import ...


.fi
.RE

.PP
\fBPROJECT\_DIR/cat\-example3.txt\fP

.PP
.RS

.nf
example 3. import the n last modified files in a directory:
test2 file
more stupid test files  
last line ended with two spaces



test3 file
this file have two leading and trailing blank lines


text after import ...


.fi
.RE

.PP
\fB\_\_template\fP

.PP
.RS

.nf
\-\-\-
target: cat\-example5.txt
markdown: true
wrap: 20
...
example 5. import all files in a directory, exclude lines matching PATTERN , (lines with a leading hash):
%%cat \-v '^#' functions/*%%

text after import ...


.fi
.RE

.PP
\fBPROJECT\_DIR/cat\-example5.txt\fP

.PP
.RS

.nf
example 5. import all files in a directory, exclude lines matching PATTERN , (lines with a leading hash):

hello() { echo "hello $1" ;}


DEATH() {
    exit
}

text after import ...


.fi
.RE

.PP
Notice how none of the lines are wrapped since
the files imported aren't markdown files with the
\fB\fCmd\fR extension.

.SH template scripts
.PP
If a template directory contains an executable
file named: \fB\fC\_\_script\fR, it will get executed after
the template has been processed with the full path
to the generated file passed as its first
argument.

.SH ENVIRONMENT
.PP
\fB\fCBASHBUD\_DIR\fR
.br
amani[environ][0][BASHBUD\_DIR][description]
defaults to: $XDG\_CONFIG\_HOME/bashbud

.PP
\fB\fCBASHBUD\_DATEFORMAT\fR
.br
amani[environ][1][BASHBUD\_DATEFORMAT][description]
defaults to: %Y\-%m\-%d

.SH DEPENDENCIES
.PP
\fB\fCbash\fR
\fB\fCgawk\fR
\fB\fCsed\fR

.SH AUTHOR
.PP
budRich 
\[la]https://github.com/budlabs\[ra]

.SH SEE ALSO
.PP
bash(1), awk(1), sed(1),
